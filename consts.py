#A list representing all the unique entity types in python
ENTITY_LIST = ["function",
 "class",
 "global_var",
 "lambda",
 "import",
 "execution_block",
 "comment",
 "comment_block",
 "decorator",
 "misc"]

    
AST_NODE_TYPES = [
 "Num",
 "Str",
 "Bytes",
 "List",
 "Tuple",
 "Set",
 "Dict",
 "Ellipsis",
 "NameConstant",
 "Name",
 "Load",
 "Store",
 "Del",
 "Starred",
 "Expr",
 "UnaryOp",
 "UAdd",
 "USub",
 "Not",
 "Invert",
 "BinOp",
 "Add",
 "Sub",
 "Mult",
 "Div",
 "FloorDiv",
 "Mod",
 "Pow",
 "LShift",
 "RShift",
 "BitOr",
 "BitXor",
 "BitAnd",
 "BoolOp",
 "And",
 "Or",
 "Compare",
 "Eq",
 "NotEq",
 "Lt",
 "LtE",
 "Gt",
 "GtE",
 "Is",
 "IsNot",
 "In",
 "NotIn",
 "Call",
 "keyword",
 "IfExp",
 "Attribute",
 "Subscript",
 "Index",
 "Slice",
 "ExtSlice",
 "ListComp",
 "SetComp",
 "GeneratorExp",
 "DictComp",
 "comprehension",
 "Assign",
 "AugAssign",
 "Print",
 "Raise",
 "Assert",
 "Delete",
 "Pass",
 "Import",
 "ImportFrom",
 "alias",
 "If",
 "For",
 "While",
 "Break",
 "Continue",
 "Try",
 "TryFinally",
 "TryExcept",
 "ExceptHandler",
 "With",
 "FunctionDef",
 "Lambda",
 "arguments",
 "arg",
 "Return",
 "Yield",
 "YieldFrom",
 "Global",
 "Nonlocal",
 "ClassDef"]  

#TODO: Create a list of dicts that organize by type of Node type, i.e. Literal, etc. 
#That division makes more sense, than randomly taking out node types
AST_NODE_TYPES_SUB =  [
 "Num",
 "Str",
 "List",
 "Tuple",
 "Dict",
 "Ellipsis",
 "NameConstant",
 "Name",
 "Load",
 "Store",
 "Del",
 "Starred",
 "Expr",
 "UnaryOp",
 "UAdd",
 "USub",
 "Not",
 "Invert",
 "BinOp",
 "Add",
 "Sub",
 "Mult",
 "Div",
 "FloorDiv",
 "Mod",
 "Pow",
 "LShift",
 "RShift",
 "BitOr",
 "BitXor",
 "BitAnd",
 "BoolOp",
 "And",
 "Or",
 "Compare",
 "Eq",
 "NotEq",
 "Lt",
 "LtE",
 "Gt",
 "GtE",
 "Is",
 "IsNot",
 "In",
 "NotIn",
 "Call",
 "keyword",
 "IfExp",
 "Attribute",
 "Subscript",
 "Index",
 "Slice",
 "ExtSlice",
 "ListComp",
 "SetComp",
 "GeneratorExp",
 "DictComp",
 "comprehension",
 "Assign",
 "AugAssign",
 "Print",
 "Raise",
 "Assert",
 "Delete",
 "Pass",
 "Import",
 "ImportFrom",
 "alias",
 "If",
 "For",
 "While",
 "Break",
 "Continue",
 "Try",
 "TryFinally",
 "TryExcept",
 "ExceptHandler",
 "With",
 "FunctionDef",
 "Lambda",
 "arguments",
 "arg",
 "Return",
 "Yield",
 "YieldFrom",
 "Global",
 "Nonlocal",
 "ClassDef"]

AST_NODE_TYPE2 = [
 "Import",
 "ImportFrom",
 "alias",
 "FunctionDef",
 "Lambda",
 "ClassDef",
]

